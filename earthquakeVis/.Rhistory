runApp('~/test')
runApp('~/work/DS/09_DevelopingDataProducts/shiny/simplestApp')
runApp('~/test')
runApp('~/work/DS/09_DevelopingDataProducts/shiny/markupApp')
runApp('~/work/DS/09_DevelopingDataProducts/shiny/markupApp')
runApp('~/work/DS/09_DevelopingDataProducts/shiny/markupApp')
runApp('~/work/DS/09_DevelopingDataProducts/shiny/inputApp')
q()
q()
- Bullet 1
getwd()
package.skeleton()
training <-read.csv("pml-training.csv")
namees(training)
names(training)
head(training[,160])
library(caret)
nzv <- nearZeroVar(training, saveMetrics = TRUE)
dim(nzv)
head(nzv)
sum(nzv[,nzv])
sum(nzv[,"nzv"])
nzv[nzv[,"nzv"]==TRUE,]
hist(training[,"new_window"])
head(training[,"new_window"])
head(training[,"kurtosis_roll_belt"])
hist(training[,"kurtosis_roll_belt"])
hist(as.numeric(training[,"kurtosis_roll_belt"]))
hist(log10(as.numeric(training[,"kurtosis_roll_belt"])+1))
dim(training)
head(training[,"username"])
head(training[,"user_name"])
head(training[,"classe"])
training <- read.csv("pml-training.csv", stringsAsFactors = FALSE)
nzv <- nearZeroVar(training, saveMetrics = TRUE)
sum(nzv[,"nzv"])
head(nzv)
nzv[nzv[,"nzv"]==TRUE,]
hist(training[,"new_window"])
str(training)
summary(training[,"user_name"])
levels(training[,"user_name"])
facctors(raining[,"user_name"])
factors(raining[,"user_name"])
factor(raining[,"user_name"])
factor(training[,"user_name"])
names(training)
summary(training[,'new_window'])
head(training[,'new_window'])
head(training[,'number_window'])
head(training[,'num_window'])
summary(training[,'num_window'])
plot(training[,'num_window'])
hist(training[,'num_window'])
hist(training[,'classe'])
hist(as.numeric(training[,'classe']))
hist(factor(training[,'classe'])_
hist(factor(training[,'classe']))
tabel(factor(training[,'classe']))
tabl(feactor(training[,'classe']))
tableee(feactor(training[,'classe']))
table(feactor(training[,'classe']))
table(factor(training[,'classe']))
att <- names(training)
View(att)
head(att)
head(att,20)
str(training[,"X"])
hist(training[,"X"])
plot(training[,"X"])
att
str(training[,1:10])
q()
trainURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
train_DF <- read.csv(file=trainURL, na.strings = c("NA", ""), stringsAsFactors=FALSE)
str(train_DF)
# Load training data
# download from "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
training <- read.csv(file = "pml-training.csv",
na.strings=c("NA","NaN", " ", "", "#DIV/0!"))
# load test data
# download from "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testing <- read.csv(file = "pml-testing.csv",
na.strings=c("NA","NaN", " ", "", "#DIV/0!"))
sapply(training, is.numeric)
str(training)
?cor
correlations <- cor(training[sapply(training, is.numeric)])
corrplot.mixed(correlations, order = "hclust", tl.col="black", diag = "n", tl.pos = "lt",
lower = "circle", upper = "number", tl.cex = 1.5, mar=c(1,0,1,0))
library('corrplot')
install.packages("corrplot", dep = T)
library(corrplot)
par(ps=5)
corrplot.mixed(correlations, order = "hclust", tl.col="black", diag = "n", tl.pos = "lt",
lower = "circle", upper = "number", tl.cex = 1.5, mar=c(1,0,1,0))
q()
apropos("varimpplot")
apropos("varimp")
apropos("var")
q(0)
q()
setwd("~/work/datasciencecoursera/data/earthquakeVis")
axts <- xts(adj, order.by = tim
)
}
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plot_ly
runApp()
runApp()
runApp()
runApp()
shinyServer(function(input, output) {
}
)
)
plot_ly(x=x, y=y)
getwd()
z <- outer(x, y, f)
runApp('~/work/datasciencecoursera/data/test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cos(pi)
cos(pi/2)
cos(90)
cosd(90)
x=runif(1000)
y=runif(1000)
z=rnorm(1000)
s=interp(x,y,z,duplicate="strip")
surface3d(s$x,s$y,s$z,color="blue")
points3d(s)
library("rgl")
?interp
apropos(interp)
apropos("interp")
?surface3d
data(volcano)
z <- 2 * volcano        # Exaggerate the relief
x <- 10 * (1:nrow(z))   # 10 meter spacing (S to N)
y <- 10 * (1:ncol(z))   # 10 meter spacing (E to W)
zlim <- range(y)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen) # height color lookup table
col <- colorlut[ z - zlim[1] + 1 ] # assign colors to heights for each point
open3d()
surface3d(x, y, z, color = col, back = "lines")
dim(z)
dim(x)
length(x)
length(y)
surface3d(x, y, z, color = col, back = "lines")
for(az in seq(1:10)) {print(az)}
?seq
seq(1,360,by = 10)
azimuths <- seq(0,360,by = 5)
pols <- seq(0,180, by = 5)
rp <- matrix(, nrow = length(azimuths), ncol = length(pols))
dim(rp)
seq_along(azimuths)
source('~/work/datasciencecoursera/data/earthquakeVis/helpers.R')
rp <- matrix(, nrow = length(azimuths), ncol = length(pols))
rsv <- matrix(, nrow = length(azimuths), ncol = length(pols))
rsh <- matrix(, nrow = length(azimuths), ncol = length(pols))
rs <- matrix(, nrow = length(azimuths), ncol = length(pols))
for(i in seq_along(azimuths)) {
for(j in seq_along(pols)) {
az <- azimuths[i]
to <- pols[j]
rp[i,j] <- -(2*cos(delta)*cos(theta)*sin(delta)*sin(eta) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*cos(to)*sin(to) + 2*(((2*cos(az)^2 - 1)*cos(delta)*cos(phi)^2*sin(delta)*sin(eta) + (2*cos(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (cos(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) - 2*cos(az)*cos(eta)*cos(phi)^2*sin(az)*sin(delta) + cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*cos(az)^2 - 1)*cos(phi)^2*sin(delta)^2 + (cos(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*sin(to)^2 + (2*sin(delta)^2 + r - 2)*sin(theta))*u - (3*r - 2)*v
rsv[i,j] <- (((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta) - 2*(((2*sin(az)^2 - 1)*cos(delta)*sin(delta)*sin(eta)*sin(phi)^2 - (2*sin(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (sin(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) + 2*cos(az)*cos(eta)*sin(az)*sin(delta)*sin(phi)^2 - cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*sin(az)^2 - 1)*sin(delta)^2*sin(phi)^2 + (sin(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*cos(to)*sin(to) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*sin(to)^2)*u
rsh[i,j] <- -((((cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*cos(phi) - (cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*sin(phi))*r*cos(theta) - 2*(cos(az)*cos(delta)*cos(phi)*sin(delta) + cos(delta)*sin(az)*sin(delta)*sin(phi))*r*sin(theta))*cos(to) + ((4*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta)*sin(phi)^2 - 4*cos(az)*cos(eta)*cos(phi)*sin(az)*sin(delta)*sin(phi) - 2*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta) - (2*(2*cos(az)^2 - 1)*cos(delta)*cos(phi)*sin(delta)*sin(eta)*sin(phi) + 2*(2*cos(az)^2 - 1)*cos(eta)*sin(delta)*sin(phi)^2 - (2*cos(az)^2 - 1)*cos(eta)*sin(delta))*r)*cos(theta) - 2*((2*cos(az)^2 - 1)*r*cos(phi)*sin(delta)^2*sin(phi) - 2*cos(az)*sin(az)*sin(delta)^2*sin(phi)^2 + cos(az)*sin(az)*sin(delta)^2)*sin(theta))*sin(to))*u
rs[i,j] <- sqrt(rsv*rsv + rsh*rsh)
}
}
u,v,r,phi,delta,theta,eta <-c(1,2,3,4,5,6)
runApp()
u<-1.0;v<-1.0;r<-0;phi<-40.0;delta<-30.0;theta<10.0;eta<-5
u<-1.0;v<-1.0;r<-0;phi<-40.0;delta<-30.0;theta<-10.0;eta<-5
phi <- phi*pi/180.
delta <- delta*pi/180.
theta <- theta*pi/180.
eta <- eta*pi/180.
azimuths <- seq(0,360,by = 5)
pols <- seq(0,180, by = 5)
rp <- matrix(, nrow = length(azimuths), ncol = length(pols))
rsv <- matrix(, nrow = length(azimuths), ncol = length(pols))
rsh <- matrix(, nrow = length(azimuths), ncol = length(pols))
rs <- matrix(, nrow = length(azimuths), ncol = length(pols))
for(i in seq_along(azimuths)) {
for(j in seq_along(pols)) {
az <- azimuths[i]
to <- pols[j]
rp[i,j] <- -(2*cos(delta)*cos(theta)*sin(delta)*sin(eta) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*cos(to)*sin(to) + 2*(((2*cos(az)^2 - 1)*cos(delta)*cos(phi)^2*sin(delta)*sin(eta) + (2*cos(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (cos(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) - 2*cos(az)*cos(eta)*cos(phi)^2*sin(az)*sin(delta) + cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*cos(az)^2 - 1)*cos(phi)^2*sin(delta)^2 + (cos(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*sin(to)^2 + (2*sin(delta)^2 + r - 2)*sin(theta))*u - (3*r - 2)*v
rsv[i,j] <- (((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta) - 2*(((2*sin(az)^2 - 1)*cos(delta)*sin(delta)*sin(eta)*sin(phi)^2 - (2*sin(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (sin(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) + 2*cos(az)*cos(eta)*sin(az)*sin(delta)*sin(phi)^2 - cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*sin(az)^2 - 1)*sin(delta)^2*sin(phi)^2 + (sin(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*cos(to)*sin(to) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*sin(to)^2)*u
rsh[i,j] <- -((((cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*cos(phi) - (cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*sin(phi))*r*cos(theta) - 2*(cos(az)*cos(delta)*cos(phi)*sin(delta) + cos(delta)*sin(az)*sin(delta)*sin(phi))*r*sin(theta))*cos(to) + ((4*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta)*sin(phi)^2 - 4*cos(az)*cos(eta)*cos(phi)*sin(az)*sin(delta)*sin(phi) - 2*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta) - (2*(2*cos(az)^2 - 1)*cos(delta)*cos(phi)*sin(delta)*sin(eta)*sin(phi) + 2*(2*cos(az)^2 - 1)*cos(eta)*sin(delta)*sin(phi)^2 - (2*cos(az)^2 - 1)*cos(eta)*sin(delta))*r)*cos(theta) - 2*((2*cos(az)^2 - 1)*r*cos(phi)*sin(delta)^2*sin(phi) - 2*cos(az)*sin(az)*sin(delta)^2*sin(phi)^2 + cos(az)*sin(az)*sin(delta)^2)*sin(theta))*sin(to))*u
rs[i,j] <- sqrt(rsv*rsv + rsh*rsh)
}
}
for(i in seq_along(azimuths)) {
for(j in seq_along(pols)) {
az <- azimuths[i]
to <- pols[j]
rp[i,j] <- -(2*cos(delta)*cos(theta)*sin(delta)*sin(eta) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*cos(to)*sin(to) + 2*(((2*cos(az)^2 - 1)*cos(delta)*cos(phi)^2*sin(delta)*sin(eta) + (2*cos(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (cos(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) - 2*cos(az)*cos(eta)*cos(phi)^2*sin(az)*sin(delta) + cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*cos(az)^2 - 1)*cos(phi)^2*sin(delta)^2 + (cos(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*sin(to)^2 + (2*sin(delta)^2 + r - 2)*sin(theta))*u - (3*r - 2)*v
rsv[i,j] <- (((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta) - 2*(((2*sin(az)^2 - 1)*cos(delta)*sin(delta)*sin(eta)*sin(phi)^2 - (2*sin(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (sin(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) + 2*cos(az)*cos(eta)*sin(az)*sin(delta)*sin(phi)^2 - cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*sin(az)^2 - 1)*sin(delta)^2*sin(phi)^2 + (sin(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*cos(to)*sin(to) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*sin(to)^2)*u
rsh[i,j] <- -((((cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*cos(phi) - (cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*sin(phi))*r*cos(theta) - 2*(cos(az)*cos(delta)*cos(phi)*sin(delta) + cos(delta)*sin(az)*sin(delta)*sin(phi))*r*sin(theta))*cos(to) + ((4*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta)*sin(phi)^2 - 4*cos(az)*cos(eta)*cos(phi)*sin(az)*sin(delta)*sin(phi) - 2*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta) - (2*(2*cos(az)^2 - 1)*cos(delta)*cos(phi)*sin(delta)*sin(eta)*sin(phi) + 2*(2*cos(az)^2 - 1)*cos(eta)*sin(delta)*sin(phi)^2 - (2*cos(az)^2 - 1)*cos(eta)*sin(delta))*r)*cos(theta) - 2*((2*cos(az)^2 - 1)*r*cos(phi)*sin(delta)^2*sin(phi) - 2*cos(az)*sin(az)*sin(delta)^2*sin(phi)^2 + cos(az)*sin(az)*sin(delta)^2)*sin(theta))*sin(to))*u
rs[i,j] <- sqrt(rsv[i,j]*rsv[i,j] + rsh[i,j]*rsh[i,j])
}
}
rp
surface3d(azimuths, pols, rp)
image(rp)
x <- matrix(, nrow = length(azimuths), ncol = length(pols))
y <- matrix(, nrow = length(azimuths), ncol = length(pols))
z <- matrix(, nrow = length(azimuths), ncol = length(pols))
for(i in seq_along(azimuths)) {
for(j in seq_along(pols)) {
az <- azimuths[i]
to <- pols[j]
rp <- -(2*cos(delta)*cos(theta)*sin(delta)*sin(eta) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*cos(to)*sin(to) + 2*(((2*cos(az)^2 - 1)*cos(delta)*cos(phi)^2*sin(delta)*sin(eta) + (2*cos(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (cos(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) - 2*cos(az)*cos(eta)*cos(phi)^2*sin(az)*sin(delta) + cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*cos(az)^2 - 1)*cos(phi)^2*sin(delta)^2 + (cos(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*sin(to)^2 + (2*sin(delta)^2 + r - 2)*sin(theta))*u - (3*r - 2)*v
rsv <- (((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta) - 2*(((2*sin(az)^2 - 1)*cos(delta)*sin(delta)*sin(eta)*sin(phi)^2 - (2*sin(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (sin(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) + 2*cos(az)*cos(eta)*sin(az)*sin(delta)*sin(phi)^2 - cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*sin(az)^2 - 1)*sin(delta)^2*sin(phi)^2 + (sin(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*cos(to)*sin(to) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*sin(to)^2)*u
rsh <- -((((cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*cos(phi) - (cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*sin(phi))*r*cos(theta) - 2*(cos(az)*cos(delta)*cos(phi)*sin(delta) + cos(delta)*sin(az)*sin(delta)*sin(phi))*r*sin(theta))*cos(to) + ((4*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta)*sin(phi)^2 - 4*cos(az)*cos(eta)*cos(phi)*sin(az)*sin(delta)*sin(phi) - 2*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta) - (2*(2*cos(az)^2 - 1)*cos(delta)*cos(phi)*sin(delta)*sin(eta)*sin(phi) + 2*(2*cos(az)^2 - 1)*cos(eta)*sin(delta)*sin(phi)^2 - (2*cos(az)^2 - 1)*cos(eta)*sin(delta))*r)*cos(theta) - 2*((2*cos(az)^2 - 1)*r*cos(phi)*sin(delta)^2*sin(phi) - 2*cos(az)*sin(az)*sin(delta)^2*sin(phi)^2 + cos(az)*sin(az)*sin(delta)^2)*sin(theta))*sin(to))*u
rs <- sqrt(rsv*rsv + rsh*rsh)
x[i,j] <- rp*sin(to)*cos(az)
y[i,j] <- rp*sin(to)*sin(az)
z[i,j] <- rp*cos(to)
}
}
surface3d(x,y,z)
spheres3d(x,y,z,radius=0.1,color="#333399")
surface3d(x,y,z, color="red")
spheres3d(x,y,z, color="red")
plotly(x,y,z, color="red")
plot_ly(x,y,z, color="red")
plot_ly(x,y,z, type = "surface")
?plot_ly
plot_ly(z, type = "surface")
plot_ly(date.frame(z), type = "surface")
plot_ly(data.frame(z), type = "surface")
plot_ly(x = rnorm(10), y = rnorm(10), z = rnorm(10), type = "scatter3d")
plot_ly(x = rnorm(10), y = rnorm(10), z = rnorm(10), type = "surface")
dim(volcano)
dim(z)
class(volcano)
plot_ly(z=z, type = "surface")
plot_ly(z=z,x=x,y=y type = "surface")
plot_ly(z=z,x=x,y=y, type = "surface")
azimuths <- seq(0,360,by = 2)
pols <- seq(0,180, by = 2)
x <- matrix(, nrow = length(azimuths), ncol = length(pols))
y <- matrix(, nrow = length(azimuths), ncol = length(pols))
z <- matrix(, nrow = length(azimuths), ncol = length(pols))
for(i in seq_along(azimuths)) {
for(j in seq_along(pols)) {
az <- azimuths[i]
to <- pols[j]
rp <- -(2*cos(delta)*cos(theta)*sin(delta)*sin(eta) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*cos(to)*sin(to) + 2*(((2*cos(az)^2 - 1)*cos(delta)*cos(phi)^2*sin(delta)*sin(eta) + (2*cos(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (cos(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) - 2*cos(az)*cos(eta)*cos(phi)^2*sin(az)*sin(delta) + cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*cos(az)^2 - 1)*cos(phi)^2*sin(delta)^2 + (cos(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*sin(to)^2 + (2*sin(delta)^2 + r - 2)*sin(theta))*u - (3*r - 2)*v
rsv <- (((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta) - 2*(((2*sin(az)^2 - 1)*cos(delta)*sin(delta)*sin(eta)*sin(phi)^2 - (2*sin(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (sin(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) + 2*cos(az)*cos(eta)*sin(az)*sin(delta)*sin(phi)^2 - cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*sin(az)^2 - 1)*sin(delta)^2*sin(phi)^2 + (sin(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*cos(to)*sin(to) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*sin(to)^2)*u
rsh <- -((((cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*cos(phi) - (cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*sin(phi))*r*cos(theta) - 2*(cos(az)*cos(delta)*cos(phi)*sin(delta) + cos(delta)*sin(az)*sin(delta)*sin(phi))*r*sin(theta))*cos(to) + ((4*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta)*sin(phi)^2 - 4*cos(az)*cos(eta)*cos(phi)*sin(az)*sin(delta)*sin(phi) - 2*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta) - (2*(2*cos(az)^2 - 1)*cos(delta)*cos(phi)*sin(delta)*sin(eta)*sin(phi) + 2*(2*cos(az)^2 - 1)*cos(eta)*sin(delta)*sin(phi)^2 - (2*cos(az)^2 - 1)*cos(eta)*sin(delta))*r)*cos(theta) - 2*((2*cos(az)^2 - 1)*r*cos(phi)*sin(delta)^2*sin(phi) - 2*cos(az)*sin(az)*sin(delta)^2*sin(phi)^2 + cos(az)*sin(az)*sin(delta)^2)*sin(theta))*sin(to))*u
rs <- sqrt(rsv*rsv + rsh*rsh)
x[i,j] <- rp*sin(to)*cos(az)
y[i,j] <- rp*sin(to)*sin(az)
z[i,j] <- rp*cos(to)
}
}
plot_ly(z=z,x=x,y=y, type = "surface")
surface3d(x,y,z, color="red")
length(azimuths)
phi
delta
points3d(x,y,z)
for(i in seq_along(azimuths)) {
for(j in seq_along(pols)) {
az <- azimuths[i] *pi/180.
to <- pols[j] * pi/180.
rp <- -(2*cos(delta)*cos(theta)*sin(delta)*sin(eta) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*cos(to)*sin(to) + 2*(((2*cos(az)^2 - 1)*cos(delta)*cos(phi)^2*sin(delta)*sin(eta) + (2*cos(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (cos(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) - 2*cos(az)*cos(eta)*cos(phi)^2*sin(az)*sin(delta) + cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*cos(az)^2 - 1)*cos(phi)^2*sin(delta)^2 + (cos(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*sin(to)^2 + (2*sin(delta)^2 + r - 2)*sin(theta))*u - (3*r - 2)*v
rsv <- (((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta) - 2*(((2*sin(az)^2 - 1)*cos(delta)*sin(delta)*sin(eta)*sin(phi)^2 - (2*sin(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (sin(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) + 2*cos(az)*cos(eta)*sin(az)*sin(delta)*sin(phi)^2 - cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*sin(az)^2 - 1)*sin(delta)^2*sin(phi)^2 + (sin(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*cos(to)*sin(to) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*sin(to)^2)*u
rsh <- -((((cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*cos(phi) - (cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*sin(phi))*r*cos(theta) - 2*(cos(az)*cos(delta)*cos(phi)*sin(delta) + cos(delta)*sin(az)*sin(delta)*sin(phi))*r*sin(theta))*cos(to) + ((4*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta)*sin(phi)^2 - 4*cos(az)*cos(eta)*cos(phi)*sin(az)*sin(delta)*sin(phi) - 2*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta) - (2*(2*cos(az)^2 - 1)*cos(delta)*cos(phi)*sin(delta)*sin(eta)*sin(phi) + 2*(2*cos(az)^2 - 1)*cos(eta)*sin(delta)*sin(phi)^2 - (2*cos(az)^2 - 1)*cos(eta)*sin(delta))*r)*cos(theta) - 2*((2*cos(az)^2 - 1)*r*cos(phi)*sin(delta)^2*sin(phi) - 2*cos(az)*sin(az)*sin(delta)^2*sin(phi)^2 + cos(az)*sin(az)*sin(delta)^2)*sin(theta))*sin(to))*u
rs <- sqrt(rsv*rsv + rsh*rsh)
x[i,j] <- rp*sin(to)*cos(az)
y[i,j] <- rp*sin(to)*sin(az)
z[i,j] <- rp*cos(to)
}
}
surface3d(x,y,z)
plot_ly(z=z,x=x,y=y, type = "surface")
azimuths <- seq(0,360,by = 2)
pols <- seq(0,180, by = 4)
x <- matrix(, nrow = length(azimuths), ncol = length(pols))
y <- matrix(, nrow = length(azimuths), ncol = length(pols))
z <- matrix(, nrow = length(azimuths), ncol = length(pols))
for(i in seq_along(azimuths)) {
for(j in seq_along(pols)) {
az <- azimuths[i] *pi/180.
to <- pols[j] * pi/180.
rp <- -(2*cos(delta)*cos(theta)*sin(delta)*sin(eta) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*cos(to)*sin(to) + 2*(((2*cos(az)^2 - 1)*cos(delta)*cos(phi)^2*sin(delta)*sin(eta) + (2*cos(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (cos(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) - 2*cos(az)*cos(eta)*cos(phi)^2*sin(az)*sin(delta) + cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*cos(az)^2 - 1)*cos(phi)^2*sin(delta)^2 + (cos(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*sin(to)^2 + (2*sin(delta)^2 + r - 2)*sin(theta))*u - (3*r - 2)*v
rsv <- (((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta) - 2*(((2*sin(az)^2 - 1)*cos(delta)*sin(delta)*sin(eta)*sin(phi)^2 - (2*sin(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (sin(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) + 2*cos(az)*cos(eta)*sin(az)*sin(delta)*sin(phi)^2 - cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*sin(az)^2 - 1)*sin(delta)^2*sin(phi)^2 + (sin(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*cos(to)*sin(to) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*sin(to)^2)*u
rsh <- -((((cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*cos(phi) - (cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*sin(phi))*r*cos(theta) - 2*(cos(az)*cos(delta)*cos(phi)*sin(delta) + cos(delta)*sin(az)*sin(delta)*sin(phi))*r*sin(theta))*cos(to) + ((4*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta)*sin(phi)^2 - 4*cos(az)*cos(eta)*cos(phi)*sin(az)*sin(delta)*sin(phi) - 2*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta) - (2*(2*cos(az)^2 - 1)*cos(delta)*cos(phi)*sin(delta)*sin(eta)*sin(phi) + 2*(2*cos(az)^2 - 1)*cos(eta)*sin(delta)*sin(phi)^2 - (2*cos(az)^2 - 1)*cos(eta)*sin(delta))*r)*cos(theta) - 2*((2*cos(az)^2 - 1)*r*cos(phi)*sin(delta)^2*sin(phi) - 2*cos(az)*sin(az)*sin(delta)^2*sin(phi)^2 + cos(az)*sin(az)*sin(delta)^2)*sin(theta))*sin(to))*u
rs <- sqrt(rsv*rsv + rsh*rsh)
x[i,j] <- rp*sin(to)*cos(az)
y[i,j] <- rp*sin(to)*sin(az)
z[i,j] <- rp*cos(to)
}
}
plot_ly(z,x,y)
plot_ly(z,x,y,type="surface")
plot_ly(z=z,x=x,y=y, type = "surface")
azimuths <- seq(0,360,by = 3)
pols <- seq(0,180, by = 6)
x <- matrix(, nrow = length(azimuths), ncol = length(pols))
y <- matrix(, nrow = length(azimuths), ncol = length(pols))
z <- matrix(, nrow = length(azimuths), ncol = length(pols))
for(i in seq_along(azimuths)) {
for(j in seq_along(pols)) {
az <- azimuths[i] *pi/180.
to <- pols[j] * pi/180.
rp <- -(2*cos(delta)*cos(theta)*sin(delta)*sin(eta) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*cos(to)*sin(to) + 2*(((2*cos(az)^2 - 1)*cos(delta)*cos(phi)^2*sin(delta)*sin(eta) + (2*cos(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (cos(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) - 2*cos(az)*cos(eta)*cos(phi)^2*sin(az)*sin(delta) + cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*cos(az)^2 - 1)*cos(phi)^2*sin(delta)^2 + (cos(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*sin(to)^2 + (2*sin(delta)^2 + r - 2)*sin(theta))*u - (3*r - 2)*v
rsv <- (((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta) - 2*(((2*sin(az)^2 - 1)*cos(delta)*sin(delta)*sin(eta)*sin(phi)^2 - (2*sin(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (sin(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) + 2*cos(az)*cos(eta)*sin(az)*sin(delta)*sin(phi)^2 - cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*sin(az)^2 - 1)*sin(delta)^2*sin(phi)^2 + (sin(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*cos(to)*sin(to) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*sin(to)^2)*u
rsh <- -((((cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*cos(phi) - (cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*sin(phi))*r*cos(theta) - 2*(cos(az)*cos(delta)*cos(phi)*sin(delta) + cos(delta)*sin(az)*sin(delta)*sin(phi))*r*sin(theta))*cos(to) + ((4*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta)*sin(phi)^2 - 4*cos(az)*cos(eta)*cos(phi)*sin(az)*sin(delta)*sin(phi) - 2*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta) - (2*(2*cos(az)^2 - 1)*cos(delta)*cos(phi)*sin(delta)*sin(eta)*sin(phi) + 2*(2*cos(az)^2 - 1)*cos(eta)*sin(delta)*sin(phi)^2 - (2*cos(az)^2 - 1)*cos(eta)*sin(delta))*r)*cos(theta) - 2*((2*cos(az)^2 - 1)*r*cos(phi)*sin(delta)^2*sin(phi) - 2*cos(az)*sin(az)*sin(delta)^2*sin(phi)^2 + cos(az)*sin(az)*sin(delta)^2)*sin(theta))*sin(to))*u
rs <- sqrt(rsv*rsv + rsh*rsh)
x[i,j] <- rp*sin(to)*cos(az)
y[i,j] <- rp*sin(to)*sin(az)
z[i,j] <- rp*cos(to)
}
}
plot_ly(z=z,x=x,y=y, type = "surface")
azimuths <- seq(0,360,by = 3)
pols <- c(seq(0,180, by = 6),180)
x <- matrix(, nrow = length(azimuths), ncol = length(pols))
y <- matrix(, nrow = length(azimuths), ncol = length(pols))
z <- matrix(, nrow = length(azimuths), ncol = length(pols))
for(i in seq_along(azimuths)) {
for(j in seq_along(pols)) {
az <- azimuths[i] *pi/180.
to <- pols[j] * pi/180.
rp <- -(2*cos(delta)*cos(theta)*sin(delta)*sin(eta) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*cos(to)*sin(to) + 2*(((2*cos(az)^2 - 1)*cos(delta)*cos(phi)^2*sin(delta)*sin(eta) + (2*cos(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (cos(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) - 2*cos(az)*cos(eta)*cos(phi)^2*sin(az)*sin(delta) + cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*cos(az)^2 - 1)*cos(phi)^2*sin(delta)^2 + (cos(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*sin(to)^2 + (2*sin(delta)^2 + r - 2)*sin(theta))*u - (3*r - 2)*v
rsv <- (((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta) - 2*(((2*sin(az)^2 - 1)*cos(delta)*sin(delta)*sin(eta)*sin(phi)^2 - (2*sin(az)^2 - 1)*cos(eta)*cos(phi)*sin(delta)*sin(phi) - (sin(az)^2 + 1)*cos(delta)*sin(delta)*sin(eta) - (2*cos(az)*cos(delta)*cos(phi)*sin(az)*sin(delta)*sin(eta)*sin(phi) + 2*cos(az)*cos(eta)*sin(az)*sin(delta)*sin(phi)^2 - cos(az)*cos(eta)*sin(az)*sin(delta))*r)*cos(theta) - (2*r*cos(az)*cos(phi)*sin(az)*sin(delta)^2*sin(phi) - (2*sin(az)^2 - 1)*sin(delta)^2*sin(phi)^2 + (sin(az)^2 + 1)*sin(delta)^2 - 1)*sin(theta))*cos(to)*sin(to) - 2*(((cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*cos(phi) + (cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*sin(phi))*r*cos(theta) + 2*(cos(delta)*cos(phi)*sin(az)*sin(delta) - cos(az)*cos(delta)*sin(delta)*sin(phi))*r*sin(theta))*sin(to)^2)*u
rsh <- -((((cos(delta)*cos(eta)*sin(az) + (2*cos(az)*sin(delta)^2 - cos(az))*sin(eta))*cos(phi) - (cos(az)*cos(delta)*cos(eta) - (2*sin(az)*sin(delta)^2 - sin(az))*sin(eta))*sin(phi))*r*cos(theta) - 2*(cos(az)*cos(delta)*cos(phi)*sin(delta) + cos(delta)*sin(az)*sin(delta)*sin(phi))*r*sin(theta))*cos(to) + ((4*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta)*sin(phi)^2 - 4*cos(az)*cos(eta)*cos(phi)*sin(az)*sin(delta)*sin(phi) - 2*cos(az)*cos(delta)*sin(az)*sin(delta)*sin(eta) - (2*(2*cos(az)^2 - 1)*cos(delta)*cos(phi)*sin(delta)*sin(eta)*sin(phi) + 2*(2*cos(az)^2 - 1)*cos(eta)*sin(delta)*sin(phi)^2 - (2*cos(az)^2 - 1)*cos(eta)*sin(delta))*r)*cos(theta) - 2*((2*cos(az)^2 - 1)*r*cos(phi)*sin(delta)^2*sin(phi) - 2*cos(az)*sin(az)*sin(delta)^2*sin(phi)^2 + cos(az)*sin(az)*sin(delta)^2)*sin(theta))*sin(to))*u
rs <- sqrt(rsv*rsv + rsh*rsh)
x[i,j] <- rp*sin(to)*cos(az)
y[i,j] <- rp*sin(to)*sin(az)
z[i,j] <- rp*cos(to)
}
}
plot_ly(z=z,x=x,y=y, type = "surface")
surface3d(x,y,z,color = z)
?plot3d
?mesh3d
plot3d(x,y,z,type="shade")
plot3d(x,y,z)
?surface3d
zlim <- range(y)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen) # height color lookup table
col <- colorlut[ z - zlim[1] + 1 ] # assign colors to heights for each point
open3d()
surface3d(x, y, z, color = col, back = "lines")
dim(clo)
dim(col)
length(col)
zlim
col <- colorlut[ z ]
zlim <- range(z)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen) # height color lookup table
col <- colorlut[ z - zlim[1] + 1 ] # assign colors to heights for each point
open3d()
surface3d(x, y, z, color = col, back = "lines")
head(colorlut)
length(colorlut)
class(colorlut)
dim(colorlut)
library(plot4d)
library(plot3d)
install.packages("plot3d", dep = T)
install.packages("plot3D", dep = T)
library(plot3D)
?surf3D
surf3D(x,y,z)
?surface3d
r <- sqrt(x*x+y*y+z*z)
rlim <-range(r)
rlim
rlen <-rlim[2] - rlim[1] + 1
colorlut <- terrain.colors(rlen)
col <- colorlut[r - rlim[1] + 1]
surface3d(x, y, z ,color = col)
surface3d(x, y, z ,color = col, back = "lines")
jet.colors <-   # function from grDevices package
colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan",
"#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
colorzjet <- jet.colors(100)  # 100 separate color
surface3d(x,y,z,color = colorzjet[ findInterval(r, seq(min(r), max(r), length=100))])
source('~/work/datasciencecoursera/data/earthquakeVis/helpers.R')
res <- rsv(1.0,0.,0,45.0, 45.0, 0, 0)
source('~/work/datasciencecoursera/data/earthquakeVis/helpers.R')
res <- rsv(1.0,0.,0,45.0, 45.0, 0, 0)
surface3d(res$x,res$y,res$z,color = colorzjet[ findInterval(res$r, seq(min(res$r), max(res$r), length=100))])
surface3d(res$x,res$y,res$z,color = colorzjet[ findInterval(res$r, seq(min(res$r), max(res$r), length=100))])
surface3d(res$x,res$y,res$z,color = colorzjet[ findInterval(res$r, seq(min(res$r), max(res$r), length=100))],title="my plot")
surface3d(res$x,res$y,res$z,color = colorzjet[ findInterval(res$r, seq(min(res$r), max(res$r), length=100))],main="my plot")
surface3d(res$x,res$y,res$z,color = colorzjet[ findInterval(res$r, seq(min(res$r), max(res$r), length=100))],main="my plot");axis3d()
surface3d(res$x,res$y,res$z,color = colorzjet[ findInterval(res$r, seq(min(res$r), max(res$r), length=100))],main="my plot")
?axis3d
axes3d()
axis3d('x', pos = c(NA, 0, 0))
title3d('main', 'sub', 'xlab', 'ylab', 'zlab')
?title3d
runApp()
runApp()
library(rsm)
install_github("shinyRGL", "trestletech")
library(devtools)
install_github("shinyRGL", "trestletech")
runApp()
runApp()
runApp()
?reactive
values <- reactiveValues(A=1)
reactiveB <- reactive({
values$A + 1
})
reactiveB()
reactiveB
reactiveC <- reactive(quote({ values$A + 2 }), quoted = TRUE)
reactiveC
?actionButton
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("rglwidget")
install.packages("rglwidget", dep = T)
runApp()
runApp()
runApp()
runApp()
3^2
runApp()
axes3d?
)
?axes3d
axes3d(c('x--', 'x-+', 'x+-', 'x++'))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rgl.lines(c(min(x), max(x)), c(0, 0), c(0, 0), color = "black")
rgl.lines(c(0, 0), c(min(y),max(y)), c(0, 0), color = "red")
rgl.lines(c(0, 0), c(0, 0), c(min(z),max(z)), color = "green")
runApp()
runApp()
runApp()
pols <- c(seq(0,180, by = 12),180)
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='jjww2015',
token='8D11134BA698C306937525E0CAC82CC3',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jjww2015', token='8D11134BA698C306937525E0CAC82CC3', secret='CwuuFdDgA78HPw4FsWGJdJrIaIcgdnUTRgbdtYPf')
getwd()
runApp()
runApp()
?bbox3d
runApp()
runApp()
search()
